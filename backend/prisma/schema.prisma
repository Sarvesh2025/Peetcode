// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  username    String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  submissions Submission[]
  solutions   Solution[]
}

model Problem {
  id           Int          @id @default(autoincrement())
  title        String       @unique
  description  String
  difficulty   Difficulty
  category     String[]
  testCases    Json[]      // Store test cases as JSON
  submissions  Submission[]
  solutions    Solution[]
  acceptanceRate Float      @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Submission {
  id        Int      @id @default(autoincrement())
  code      String
  language  String
  status    Status
  runtime   Int?     // in milliseconds
  memory    Int?     // in KB
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int
  createdAt DateTime @default(now())
}

model Solution {
  id        Int      @id @default(autoincrement())
  code      String
  language  String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}